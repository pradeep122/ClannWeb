clannParser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Definition": parse_Definition,
        "Sentences": parse_Sentences,
        "Sentence": parse_Sentence,
        "VP": parse_VP,
        "NP": parse_NP,
        "Infinitive": parse_Infinitive,
        "PastTense": parse_PastTense,
        "PredicateObject": parse_PredicateObject,
        "PredicateModifier": parse_PredicateModifier,
        "TimeModifier": parse_TimeModifier,
        "LocationModifier": parse_LocationModifier,
        "CollaborationModifier": parse_CollaborationModifier,
        "LaxSentence": parse_LaxSentence,
        "LaxVP": parse_LaxVP,
        "LaxNP": parse_LaxNP,
        "LaxInfinitive": parse_LaxInfinitive,
        "LaxPastTense": parse_LaxPastTense,
        "LaxPredicateObject": parse_LaxPredicateObject,
        "LaxPredicateModifier": parse_LaxPredicateModifier,
        "LaxTimeModifier": parse_LaxTimeModifier,
        "LaxLocationModifier": parse_LaxLocationModifier,
        "LaxCollaborationModifier": parse_LaxCollaborationModifier,
        "timeNoun": parse_timeNoun,
        "locationNoun": parse_locationNoun,
        "prep": parse_prep,
        "presentVerb": parse_presentVerb,
        "pastVerb": parse_pastVerb,
        "determiner": parse_determiner,
        "adjective": parse_adjective,
        "Instance": parse_Instance,
        "Snippet": parse_Snippet,
        "instanceSnippet": parse_instanceSnippet,
        "classSnippet": parse_classSnippet,
        "QName": parse_QName,
        "LongName": parse_LongName,
        "Name": parse_Name,
        "name": parse_name,
        "letters": parse_letters,
        "anyWords": parse_anyWords,
        "anyWord": parse_anyWord,
        "_": parse__,
        "__": parse___,
        "lb": parse_lb,
        "rb": parse_rb
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Definition";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_Definition() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Sentences();
        if (result0 !== null) {
          result0 = (function(offset, s) {
            data.statements = s;
            return data;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Sentences() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse__();
        if (result1 !== null) {
          result2 = parse_Sentence();
          if (result2 !== null) {
            result3 = parse__();
            if (result3 !== null) {
              result1 = [result1, result2, result3];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
        } else {
          result1 = null;
          pos = pos1;
        }
        if (result1 !== null) {
          result1 = (function(offset, s) {return s})(pos0, result1[1]);
        }
        if (result1 === null) {
          pos = pos0;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos0 = pos;
            pos1 = pos;
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_Sentence();
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
            if (result1 !== null) {
              result1 = (function(offset, s) {return s})(pos0, result1[1]);
            }
            if (result1 === null) {
              pos = pos0;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_LaxSentence();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result1 = (function(offset, s) {return s})(pos0, result1[1]);
          }
          if (result1 === null) {
            pos = pos0;
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              pos0 = pos;
              pos1 = pos;
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_LaxSentence();
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              if (result1 !== null) {
                result1 = (function(offset, s) {return s})(pos0, result1[1]);
              }
              if (result1 === null) {
                pos = pos0;
              }
            }
          } else {
            result0 = null;
          }
        }
        return result0;
      }
      
      function parse_Sentence() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Instance();
        if (result0 !== null) {
          result1 = parse_VP();
          if (result1 !== null) {
            result2 = parse_NP();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result3 = ".";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, pp, vp, np) {
              var statement = {
                subject : pp,
                object : np,
                relation : vp,
                errors : 'none'
              };
        
              return statement;
            })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VP() {
        var result0;
        
        result0 = parse_Infinitive();
        if (result0 === null) {
          result0 = parse_PastTense();
        }
        return result0;
      }
      
      function parse_NP() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PredicateObject();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_PredicateModifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_PredicateModifier();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, obj, mods) {
            if(!obj.modifiers) obj.modifiers = [];
            for (var i = mods.length - 1; i >= 0; i--) {
              obj.modifiers.push(mods[i]);
            }
            return obj;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Infinitive() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_prep();
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_presentVerb();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, prep, verb) {
              return verb;
            })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_PastTense() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_pastVerb();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, verb) {
              return verb;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_PredicateObject() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_determiner();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse___();
          if (result2 !== null) {
            result3 = parse_adjective();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_adjective();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_Instance();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, adjs, obj) {
              if(!obj.modifiers) obj.modifiers = [];
              for (var i = adjs.length - 1; i >= 0; i--) {
                var adj = adjs[i];
                if(adj.type){
                  obj.modifiers.push(adj);
                }
              }
              return obj;
            })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_PredicateModifier() {
        var result0;
        
        result0 = parse_TimeModifier();
        if (result0 === null) {
          result0 = parse_LocationModifier();
          if (result0 === null) {
            result0 = parse_CollaborationModifier();
          }
        }
        return result0;
      }
      
      function parse_TimeModifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "by") {
            result1 = "by";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"by\"");
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_timeNoun();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tt) {
              var result = {
                type : 'endtime',
                value : tt
              };
              if(!data.times) data.times = [];
              data.times.push(tt);
              return result;
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LocationModifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "at") {
            result1 = "at";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"at\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 2) === "in") {
              result1 = "in";
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"in\"");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_locationNoun();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ll) { 
              var result = {
                type : 'location',
                value : ll
              };
              if(!data.locations) data.locations = [];
              data.locations.push(ll);
        
              return result;
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CollaborationModifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "with") {
            result1 = "with";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"with\"");
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_Instance();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, nn) {
              var result = {
                type : 'collaboration',
                value : nn
              };
              return result;
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxSentence() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {return laxParsing})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_Instance();
          if (result1 !== null) {
            result2 = parse_LaxVP();
            if (result2 !== null) {
              result3 = parse_LaxNP();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, pp, vp, np) {
            var statement = {
              subject : pp,
              object : np,
              relation : vp,
              errors : 'incomplete'
            };
        
            return statement;
          })(pos0, result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxVP() {
        var result0;
        
        result0 = parse_LaxInfinitive();
        if (result0 === null) {
          result0 = parse_LaxPastTense();
        }
        return result0;
      }
      
      function parse_LaxNP() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LaxPredicateObject();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_LaxPredicateModifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_LaxPredicateModifier();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, obj, mods) {
            if(!obj.modifiers) obj.modifiers = [];
            for (var i = mods.length - 1; i >= 0; i--) {
              obj.modifiers.push(mods[i]);
            }
            return obj;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxInfinitive() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_prep();
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_presentVerb();
              if (result3 === null) {
                result3 = parse_anyWord();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, verb) {
              return verb;
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxPastTense() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_pastVerb();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, verb) {
              return verb;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxPredicateObject() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_determiner();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse___();
          if (result2 !== null) {
            result3 = parse_adjective();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_adjective();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_Instance();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, adjs, obj) {
              if(!obj.modifiers) obj.modifiers = [];
              for (var i = adjs.length - 1; i >= 0; i--) {
                var adj = adjs[i];
                if(adj.type){
                  obj.modifiers.push(adj);
                }
              }
              return obj;
            })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxPredicateModifier() {
        var result0;
        
        result0 = parse_LaxTimeModifier();
        if (result0 === null) {
          result0 = parse_LaxLocationModifier();
          if (result0 === null) {
            result0 = parse_LaxCollaborationModifier();
          }
        }
        return result0;
      }
      
      function parse_LaxTimeModifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "by") {
            result1 = "by";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"by\"");
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_timeNoun();
              if (result3 === null) {
                result3 = parse_anyWord();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            var result = {
              type : 'endtime',
              value : tt
            };
            if(!data.times) data.times = [];
            data.times.push(tt);
            return result;
          })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxLocationModifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "at") {
            result1 = "at";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"at\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 2) === "in") {
              result1 = "in";
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"in\"");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_locationNoun();
              if (result3 === null) {
                result3 = parse_anyWord();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { 
            var result = {
              type : 'location',
              value : ll
            };
            if(!data.locations) data.locations = [];
            data.locations.push(ll);
        
            return result;
          })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LaxCollaborationModifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse___();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "with") {
            result1 = "with";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"with\"");
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_Instance();
              if (result3 === null) {
                result3 = parse_anyWord();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            var result = {
              type : 'collaboration',
              value : nn
            };
            return result;
          })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_timeNoun() {
        var result0;
        
        if (input.substr(pos, 12) === "this weekend") {
          result0 = "this weekend";
          pos += 12;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"this weekend\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 7) === "tomorow") {
            result0 = "tomorow";
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"tomorow\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 9) === "next week") {
              result0 = "next week";
              pos += 9;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"next week\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 10) === "next month") {
                result0 = "next month";
                pos += 10;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"next month\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 9) === "next year") {
                  result0 = "next year";
                  pos += 9;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"next year\"");
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_locationNoun() {
        var result0;
        
        if (input.substr(pos, 13) === "Crete, Greece") {
          result0 = "Crete, Greece";
          pos += 13;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Crete, Greece\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "ISWC") {
            result0 = "ISWC";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"ISWC\"");
            }
          }
          if (result0 === null) {
            result0 = parse_Instance();
          }
        }
        return result0;
      }
      
      function parse_prep() {
        var result0;
        
        if (input.substr(pos, 2) === "to") {
          result0 = "to";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"to\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "by") {
            result0 = "by";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"by\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 4) === "will") {
              result0 = "will";
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"will\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "on") {
                result0 = "on";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"on\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_presentVerb() {
        var result0;
        
        if (input.substr(pos, 8) === "complete") {
          result0 = "complete";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"complete\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 6) === "attend") {
            result0 = "attend";
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"attend\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 6) === "travel") {
              result0 = "travel";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"travel\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_pastVerb() {
        var result0;
        
        if (input.substr(pos, 9) === "completed") {
          result0 = "completed";
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"completed\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 7) === "went to") {
            result0 = "went to";
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"went to\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 9) === "developed") {
              result0 = "developed";
              pos += 9;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"developed\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_determiner() {
        var result0;
        
        if (input.charCodeAt(pos) === 97) {
          result0 = "a";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"a\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "an") {
            result0 = "an";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"an\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "the") {
              result0 = "the";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"the\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_adjective() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4) === "next") {
          result0 = "next";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"next\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 9) === "technical") {
            result0 = "technical";
            pos += 9;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"technical\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "his") {
              result0 = "his";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"his\"");
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, adj) {
            return {
              type : 'adjective',
              text : adj
            };
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Instance() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_QName();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_Snippet();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_Snippet();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, objname, snips) { 
        
              if(!data.objects) data.objects = [];
        
              data.objects.push(objname);
              var result = {
                text : objname
              };
              if(snips) result.snippets = snips;
              return result;
            })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("Instance");
        }
        return result0;
      }
      
      function parse_Snippet() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_instanceSnippet();
        if (result0 !== null) {
          result0 = (function(offset, snip) {
              return {
                type : 'instance',
                text : snip
              };
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_classSnippet();
          if (result0 !== null) {
            result0 = (function(offset, snip) {
                return {
                  type : 'class',
                  text : snip
                };
              })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("Snippet");
        }
        return result0;
      }
      
      function parse_instanceSnippet() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_lb();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos, 7) === "same as") {
              result2 = "same as";
              pos += 7;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"same as\"");
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_QName();
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_rb();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, obj) { 
            if(!data.objects) data.objects = [];
            data.objects.push(obj);
            return obj;
          })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("Snippet for Instances");
        }
        return result0;
      }
      
      function parse_classSnippet() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_lb();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos, 4) === "is a") {
              result2 = "is a";
              pos += 4;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"is a\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos, 5) === "is an") {
                result2 = "is an";
                pos += 5;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"is an\"");
                }
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_QName();
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_rb();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cls) { 
              if(!data.classes) data.classes = [];
              data.classes.push(cls);
              return cls;
            })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("Snippet for Classes");
        }
        return result0;
      }
      
      function parse_QName() {
        var result0;
        
        reportFailures++;
        result0 = parse_name();
        if (result0 === null) {
          result0 = parse_Name();
          if (result0 === null) {
            result0 = parse_LongName();
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("QName");
        }
        return result0;
      }
      
      function parse_LongName() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            pos1 = pos;
            result3 = parse___();
            if (result3 !== null) {
              result4 = parse_Name();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos1;
              }
            } else {
              result3 = null;
              pos = pos1;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos1 = pos;
                result3 = parse___();
                if (result3 !== null) {
                  result4 = parse_Name();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 39) {
                result3 = "'";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 34) {
            result0 = "\"";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_Name();
            if (result1 !== null) {
              pos2 = pos;
              pos3 = pos;
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_Name();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
              if (result3 !== null) {
                result3 = (function(offset, t) {return " "+t})(pos2, result3[1]);
              }
              if (result3 === null) {
                pos = pos2;
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  pos2 = pos;
                  pos3 = pos;
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_Name();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                  if (result3 !== null) {
                    result3 = (function(offset, t) {return " "+t})(pos2, result3[1]);
                  }
                  if (result3 === null) {
                    pos = pos2;
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 34) {
                  result3 = "\"";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, f, s) {return f+s.join('')})(pos0, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_Name() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (/^[A-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c, d) {return c+d.join('')})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("Name");
        }
        return result0;
      }
      
      function parse_name() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        if (/^[a-z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c, d) {return c+d.join('')})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("name");
        }
        return result0;
      }
      
      function parse_letters() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        if (/^[A-Za-z0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[A-Za-z0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, d) {return d.join('')})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("letters");
        }
        return result0;
      }
      
      function parse_anyWords() {
        var result0, result1;
        
        result1 = parse_anyWord();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_anyWord();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_anyWord() {
        var result0;
        var pos0;
        
        pos0 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 === null) {
          result0 = parse___();
          if (result0 === null) {
            if (input.charCodeAt(pos) === 35) {
              result0 = "#";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#\"");
              }
            }
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        reportFailures++;
        result0 = [];
        if (/^[ \n\r]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\r]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \n\r]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\n\\r]");
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("WS");
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1;
        
        reportFailures++;
        if (/^[ \n\r]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\r]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \n\r]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\n\\r]");
              }
            }
          }
        } else {
          result0 = null;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("WS");
        }
        return result0;
      }
      
      function parse_lb() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse__();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 91) {
            result1 = "[";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("[");
        }
        return result0;
      }
      
      function parse_rb() {
        var result0;
        
        reportFailures++;
        if (input.charCodeAt(pos) === 93) {
          result0 = "]";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"]\"");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("]");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        var laxParsing = (typeof contextParserConfig === 'undefined' ? true: contextParserConfig.laxParsing);
        var failOnCursor = (typeof contextParserConfig === 'undefined' ? false: contextParserConfig.failOnCursor);
        
        var cursor,
          data = {};
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
